{
  "_args": [
    [
      {
        "raw": "css-crunch@~0.1.x",
        "scope": null,
        "escapedName": "css-crunch",
        "name": "css-crunch",
        "rawSpec": "~0.1.x",
        "spec": ">=0.1.0 <0.2.0",
        "type": "range"
      },
      "C:\\Users\\admin\\Desktop\\Training\\Project6\\frontend-nanodegree-mobile-portfolio-master\\node_modules\\grunt-css-crunch"
    ]
  ],
  "_from": "css-crunch@>=0.1.0 <0.2.0",
  "_id": "css-crunch@0.1.1",
  "_inCache": true,
  "_location": "/css-crunch",
  "_npmUser": {
    "name": "dragonworx",
    "email": "musicartscience@gmail.com"
  },
  "_npmVersion": "1.2.14",
  "_phantomChildren": {},
  "_requested": {
    "raw": "css-crunch@~0.1.x",
    "scope": null,
    "escapedName": "css-crunch",
    "name": "css-crunch",
    "rawSpec": "~0.1.x",
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/grunt-css-crunch"
  ],
  "_resolved": "https://registry.npmjs.org/css-crunch/-/css-crunch-0.1.1.tgz",
  "_shasum": "6b568c64c984f73a74daa436eb12a764bdfe003e",
  "_shrinkwrap": null,
  "_spec": "css-crunch@~0.1.x",
  "_where": "C:\\Users\\admin\\Desktop\\Training\\Project6\\frontend-nanodegree-mobile-portfolio-master\\node_modules\\grunt-css-crunch",
  "author": {
    "name": "Ali Chamas",
    "email": "musicartscience@gmail.com",
    "url": "http://www.musicartscience.com.au"
  },
  "bugs": {
    "url": "https://github.com/dragonworx/css-crunch/issues"
  },
  "dependencies": {
    "clean-css": "~2.0.x",
    "color-terminal": "~0.0.3-4",
    "csso": "~1.3.x"
  },
  "description": "Crunches, optimizes and resolves/copies assets of css files",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-watch": "~0.5.3"
  },
  "directories": {},
  "dist": {
    "shasum": "6b568c64c984f73a74daa436eb12a764bdfe003e",
    "tarball": "https://registry.npmjs.org/css-crunch/-/css-crunch-0.1.1.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/dragonworx/css-crunch",
  "keywords": [],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/dragonworx/css-crunch/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/css-crunch",
  "maintainers": [
    {
      "name": "dragonworx",
      "email": "musicartscience@gmail.com"
    }
  ],
  "name": "css-crunch",
  "optionalDependencies": {},
  "readme": "# css-crunch\r\n\r\nCrunches, optimizes and resolves/copies assets of css files\r\n\r\n## Getting Started\r\nInstall the module with: `npm install css-crunch`\r\n\r\nYou can specify a folder to walk and collect all css files using the `src` option.\r\n\r\n```javascript\r\nvar css_crunch = require('css-crunch');\r\ncss_crunch.build({...})\r\n```\r\n\r\n## Options\r\nUse the following options to control the processing and output of your css.\r\n\r\nAt minimum you should pass either `src` or `files, plus `dest`. Other options will revert to defaults.\r\n\r\n* `src` {String} Top level css folder to walk and collect css files (not excluded with `exclude`). Files are processed as they are sorted in the file system.\r\n* `files` {Array} Order specific list of files to process for explicit compilation order (no need to use `exclude`)\r\n* `dest` {String} Full path and file name of the build output file.css (the concatinated/inlined/minified/optimised single file). Assets folder is created local to this file.\r\n* `exclude` {Array=[]} List of file patterns to exclude from the `src` css file traversal. Place an asterix at the begining or end of each pattern to wildcard.\r\n* `copy` {Boolean=true} Whether or not to copy resolved assets (images/fonts, any url defined in any of the stylesheets)\r\n* `minify` {Boolean=true} Whether or not to minify the combined/inlined output file (uses css-min)\r\n* `optimize` {Boolean=false} Whether or not to optimize the combined/inlined output file (uses csso)\r\n* `sanitize` {Boolean=true} Whether or not to clean the files of unwanted UTF-8 characters\r\n* `reporter` {String='console'} Pipe `|` delimited list of reporters. Default available are `console`, `html`.\r\n\r\nYou should use `src` or `files` exclusively, one or the other. If you are happy with just pointing css-crunch to a top level folder and having it find any css file within, use `src. If you would prefer to specify the exact set of files and therefore their processing order, use `files`.\r\n\r\n## Custom Reporter\r\nYou can add your own reporting function before calling `build(...)` by accessing the `reporters` object. Your function will be passed the options, and an array of log messages.\r\n\r\n```javascript\r\nvar css_crunch = require('css-crunch');\r\ncss_crunch.reporters['my_reporter'] = function(options, logMessages) {\r\n\tlogMessages.forEach(function(logMsg) {\r\n\t\t// logMsg = {type:'log|error|warn|step|complete', message:<string>, depth:<number>}\r\n\t});\r\n};\r\ncss_crunch.build({\r\n\tsrc: '...',\r\n\tdest: '...'\r\n})\r\n```\r\n\r\n## Release History\r\n12/11/2013 0.1.1 - fixed html reporter file path bug\r\n11/11/2013 0.1.0 - initial release\r\n\r\n## License\r\nCopyright (c) 2013 Ali Chamas  \r\nLicensed under the MIT license.\r\n=======\r\ncss-crunch\r\n==========\r\n\r\nCrunches, optimizes and resolves/copies assets of css files\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dragonworx/css-crunch.git"
  },
  "scripts": {
    "test": "grunt nodeunit"
  },
  "version": "0.1.1"
}
